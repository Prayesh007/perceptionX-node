<% layout("/layouts/boilerplate.ejs") %>

<body>
    <div id="upload-form">
        <h2>Upload File for Processing</h2>
        <form id="uploadForm" enctype="multipart/form-data">
            <label for="fileInput">
                <div class="upload-box" ondragover="handleDragOver(event)" ondrop="handleFileDrop(event)">
                    <img width="70" height="70" src="https://img.icons8.com/ios-filled/70/upload-to-cloud--v1.png"
                        alt="upload-to-cloud" />
                    <p>Drag & Drop or click to upload</p>
                </div>
                <input type="file" name="file" id="fileInput" required>
            </label>

            <button onclick="handleProgressBar()" type="submit">Upload & Process</button>
        </form>
    </div>

    <div id="progressBar-div" style="display: none;">
        <h3>PerceptionX is crafting precision, the wait will be worth it!</h3>
        <div class="loading-container">
            <img class="loading-icon" src="/assets/triquetra4.png" alt="triquetra" id="loadingIcon">
            <span id="progressText">0%</span>
        </div>
        <progress id="progressBar" value="0" max="100"></progress>
    </div>

    <div id="output-div" style="display:none;">
        <div id="output"></div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.getElementById('uploadForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const fileInput = document.getElementById('fileInput');
            if (!fileInput.files.length) {
                alert('Please select a file.');
                return;
            }

            const formData = new FormData();
            formData.append('file', fileInput.files[0]);

            try {
                const response = await fetch('/process', {
                    method: 'POST',
                    body: formData,
                });

                const data = await response.json();

                if (response.ok) {
                    const fileId = data.fileId;

                    document.getElementById('upload-form').style.display = 'none';
                    document.getElementById('output-div').style.display = 'block';

                    // Fetch and display uploaded & processed file
                    displayFilesFromMongo(fileId);
                } else {
                    document.getElementById('output').innerHTML = '<p>Failed to process the file.</p>';
                }
            } catch (err) {
                console.error('Error:', err);
                document.getElementById('output').innerHTML = '<p>Error processing the file.</p>';
            }
        });

        async function displayFilesFromMongo(fileId) {
    // Hit original file stream to detect type
    const metaResponse = await fetch(`/file/${fileId}/original`, { method: "HEAD" });
    const mimeType = metaResponse.headers.get("Content-Type");

    let uploadedHTML, processedHTML;

    if (mimeType && mimeType.startsWith("image")) {
        uploadedHTML = `<img src="/file/${fileId}/original" alt="Uploaded Image" style="max-width:100%;">`;
        processedHTML = `<img src="/file/${fileId}/processed" alt="Processed Image" style="max-width:100%;">`;
    } else if (mimeType && mimeType.startsWith("video")) {
        uploadedHTML = `<video controls style="max-width:100%;" loop autoplay>
                            <source src="/file/${fileId}/original" type="${mimeType}">
                        </video>`;
        processedHTML = `<video controls style="max-width:100%;" loop autoplay>
                            <source src="/file/${fileId}/processed" type="${mimeType}">
                        </video>`;
    } else {
        uploadedHTML = `<p>Unsupported file type.</p>`;
        processedHTML = `<p>Unsupported file type.</p>`;
    }

    document.getElementById('output').innerHTML = `
        <div class="uploads">
            <h4>Uploaded File:</h4>
            ${uploadedHTML}
        </div>
        <div class="processed">
            <h4>Processed File:</h4>
            ${processedHTML}
        </div>
    `;
}


        var socket = io();

        socket.on("progress", function (progress) {
            document.getElementById("progressBar").value = progress;
            document.getElementById("progressText").innerText = progress + "%";

            if (progress >= 100) {
                document.getElementById("loadingIcon").style.animation = "none";
                document.getElementById("progressBar-div").style.display = "none";
            }
        });

        function handleDragOver(event) {
            event.preventDefault();
            event.target.style.borderColor = "#8A2BE2";
        }

        function handleFileDrop(event) {
            event.preventDefault();
            event.target.style.borderColor = "rgba(255, 255, 255, 0.3)";
            const files = event.dataTransfer.files;
            if (files.length > 0) {
                document.getElementById("fileInput").files = files;
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            const fileInput = document.getElementById("fileInput");
            const uploadBox = document.querySelector(".upload-box");
            let fileNameDisplay = document.getElementById("file-name");

            if (!fileNameDisplay) {
                fileNameDisplay = document.createElement("p");
                fileNameDisplay.id = "file-name";
                fileNameDisplay.textContent = "No file chosen";
                uploadBox.insertAdjacentElement("afterend", fileNameDisplay);
            }

            function updateFileName(file) {
                fileNameDisplay.textContent = file ? file.name : "No file chosen";
            }

            fileInput.addEventListener("change", function () {
                if (fileInput.files.length > 0) {
                    updateFileName(fileInput.files[0]);
                }
            });

            uploadBox.addEventListener("dragover", function (e) {
                e.preventDefault();
                uploadBox.style.border = "2px dashed #8A2BE2";
            });

            uploadBox.addEventListener("dragleave", function () {
                uploadBox.style.border = "none";
            });

            uploadBox.addEventListener("drop", function (e) {
                e.preventDefault();
                uploadBox.style.border = "none";
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    fileInput.files = files;
                    updateFileName(files[0]);
                }
            });
        });

        function handleProgressBar() {
            document.getElementById('progressBar-div').style.display = 'block';
            document.getElementById('upload-form').style.display = 'none';
        }
    </script>
</body>
